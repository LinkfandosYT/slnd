/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => JustSharePleasePlugin2,
  removeExtension: () => removeExtension
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/settings.ts
var defaultSettings = {
  url: "https://jsp.ellpeck.de",
  shared: [],
  stripFrontmatter: true,
  includeNoteName: true,
  unshareDeletedFiles: true,
  autoUpdateShares: false
};

// src/settings-tab.ts
var import_obsidian = __toModule(require("obsidian"));
var JSPSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    this.containerEl.empty();
    new import_obsidian.Setting(this.containerEl).setName("Just Share Please server").setDesc(createFragment((f) => {
      f.createSpan({ text: "URL for the Just Share Please server to upload to and share links for. Defaults to the official site " });
      f.createEl("a", { text: "jsp.ellpeck.de", href: defaultSettings.url });
      f.createSpan({ text: ". For more info on self-hosting, see " });
      f.createEl("a", { text: "the official site", href: "https://jsp.ellpeck.de/#-self-hosting" });
      f.createSpan({ text: "." });
    })).addText((t) => {
      t.setValue(String(this.plugin.settings.url));
      t.onChange((v) => __async(this, null, function* () {
        this.plugin.settings.url = v || defaultSettings.url;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(this.containerEl).setName("Strip frontmatter").setDesc("Whether document frontmatter (also known as properties) should be removed from the uploaded share.").addToggle((t) => {
      t.setValue(this.plugin.settings.stripFrontmatter);
      t.onChange((v) => __async(this, null, function* () {
        this.plugin.settings.stripFrontmatter = v;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(this.containerEl).setName("Include note name").setDesc("Whether the name of the shared note should be included in the share as a heading.").addToggle((t) => {
      t.setValue(this.plugin.settings.includeNoteName);
      t.onChange((v) => __async(this, null, function* () {
        this.plugin.settings.includeNoteName = v;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(this.containerEl).setName("Unshare deleted files").setDesc("Whether shares of files should be removed automatically when they are deleted. Only supported when deleting from within Obsidian.").addToggle((t) => {
      t.setValue(this.plugin.settings.unshareDeletedFiles);
      t.onChange((v) => __async(this, null, function* () {
        this.plugin.settings.unshareDeletedFiles = v;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(this.containerEl).setName("Automatically update shares").setDesc("Whether a file's share should automatically be updated when the file is changed from within Obsidian.").addToggle((t) => {
      t.setValue(this.plugin.settings.autoUpdateShares);
      t.onChange((v) => __async(this, null, function* () {
        this.plugin.settings.autoUpdateShares = v;
        yield this.plugin.saveSettings();
      }));
    });
    this.containerEl.createEl("hr");
    this.containerEl.createEl("p", { text: "If you like this plugin and want to support its development, you can do so through my website by clicking this fancy image!" });
    this.containerEl.createEl("a", { href: "https://ellpeck.de/support" }).createEl("img", {
      attr: { src: "https://ellpeck.de/res/generalsupport.png" },
      cls: "just-share-please-support"
    });
  }
};

// src/view.ts
var import_obsidian2 = __toModule(require("obsidian"));
var _JSPView = class extends import_obsidian2.ItemView {
  constructor(plugin, leaf) {
    super(leaf);
    this.plugin = plugin;
  }
  refresh() {
    this.contentEl.empty();
    let content = this.contentEl.createDiv({ cls: "just-share-please-view" });
    if (this.plugin.settings.shared.length > 0) {
      for (let shared of this.plugin.settings.shared) {
        let abstractFile = this.plugin.app.vault.getAbstractFileByPath(shared.path);
        if (abstractFile instanceof import_obsidian2.TFile) {
          let file = abstractFile;
          let div = content.createDiv({ cls: "just-share-please-shared-item" });
          div.createSpan({ cls: "just-share-please-shared-name", text: removeExtension(shared.path).split(/[/\\]/g).pop() });
          if (file == null ? void 0 : file.path.match(/[/\\]/))
            div.createSpan({ cls: "just-share-please-shared-path", text: removeExtension(file.path) });
          new import_obsidian2.ButtonComponent(div).setClass("clickable-icon").setTooltip("Copy JSP link").setIcon("link").onClick(() => __async(this, null, function* () {
            return this.plugin.copyShareLink(shared);
          }));
          if (file) {
            new import_obsidian2.ButtonComponent(div).setClass("clickable-icon").setTooltip("Open in Obsidian").setIcon("edit").onClick((e) => __async(this, null, function* () {
              let leaf = this.app.workspace.getLeaf(e.ctrlKey);
              yield leaf.openFile(file);
              this.app.workspace.setActiveLeaf(leaf, { focus: true });
            }));
            new import_obsidian2.ButtonComponent(div).setClass("clickable-icon").setTooltip("Update in JSP").setIcon("share").onClick(() => __async(this, null, function* () {
              return this.plugin.updateFile(shared, file);
            }));
          }
          new import_obsidian2.ButtonComponent(div).setClass("clickable-icon").setTooltip("Delete from JSP").setIcon("trash").onClick(() => __async(this, null, function* () {
            return this.plugin.deleteFile(shared);
          }));
        }
      }
    } else {
      content.createSpan({ text: "You have not shared any items yet." });
    }
  }
  onload() {
    this.refresh();
  }
  getDisplayText() {
    return "Just Share Please";
  }
  getViewType() {
    return _JSPView.type;
  }
  getIcon() {
    return "share";
  }
};
var JSPView = _JSPView;
JSPView.type = "jsp-view";

// src/main.ts
var JustSharePleasePlugin2 = class extends import_obsidian3.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new JSPSettingsTab(this.app, this));
      this.registerView(JSPView.type, (l) => new JSPView(this, l));
      this.addCommand({
        id: `open-${JSPView.type}`,
        name: `Open Just Share Please view`,
        callback: () => __async(this, null, function* () {
          if (!this.app.workspace.getLeavesOfType(JSPView.type).length)
            yield this.app.workspace.getRightLeaf(false).setViewState({ type: JSPView.type, active: true });
          this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(JSPView.type)[0]);
        })
      });
      this.registerEvent(this.app.workspace.on("file-menu", (m, f) => __async(this, null, function* () {
        if (f instanceof import_obsidian3.TFile && f.extension == "md") {
          let shared = this.getSharedItem(f.path);
          if (!shared) {
            m.addItem((i) => {
              i.setTitle("Share to JSP");
              i.setIcon("share");
              i.onClick(() => __async(this, null, function* () {
                return this.shareFile(f);
              }));
            });
          } else {
            m.addItem((i) => {
              i.setTitle("Copy JSP link");
              i.setIcon("link");
              i.onClick(() => this.copyShareLink(shared));
            });
            m.addItem((i) => {
              i.setTitle("Update in JSP");
              i.setIcon("share");
              i.onClick(() => this.updateFile(shared, f));
            });
            m.addItem((i) => {
              i.setTitle("Delete from JSP");
              i.setIcon("trash");
              i.onClick(() => __async(this, null, function* () {
                return this.deleteFile(shared);
              }));
            });
          }
        }
      })));
      this.registerEvent(this.app.vault.on("rename", (f, p) => {
        if (f instanceof import_obsidian3.TFile) {
          let shared = this.getSharedItem(p);
          if (shared) {
            shared.path = f.path;
            this.refreshAllViews();
          }
        }
      }));
      this.registerEvent(this.app.vault.on("delete", (f) => {
        if (f instanceof import_obsidian3.TFile) {
          let shared = this.getSharedItem(f.path);
          if (shared) {
            if (this.settings.unshareDeletedFiles) {
              this.deleteFile(shared, false);
            } else {
              this.refreshAllViews();
            }
          }
        }
      }));
      this.registerEvent(this.app.vault.on("modify", (f) => {
        if (this.settings.autoUpdateShares && f instanceof import_obsidian3.TFile) {
          let shared = this.getSharedItem(f.path);
          if (shared)
            this.updateFile(shared, f, false);
        }
      }));
      this.addCommand({
        id: "share",
        name: "Share current file to JSP",
        editorCheckCallback: (checking, _, ctx) => {
          if (!this.getSharedItem(ctx.file.path)) {
            if (!checking)
              this.shareFile(ctx.file);
            return true;
          }
          return false;
        }
      });
      this.addCommand({
        id: "copy",
        name: "Copy current file's JSP link",
        editorCheckCallback: (checking, _, ctx) => {
          let shared = this.getSharedItem(ctx.file.path);
          if (shared) {
            if (!checking)
              this.copyShareLink(shared);
            return true;
          }
          return false;
        }
      });
      this.addCommand({
        id: "update",
        name: "Update current file in JSP",
        editorCheckCallback: (checking, _, ctx) => {
          let shared = this.getSharedItem(ctx.file.path);
          if (shared) {
            if (!checking)
              this.updateFile(shared, ctx.file);
            return true;
          }
          return false;
        }
      });
      this.addCommand({
        id: "delete",
        name: "Delete current file from JSP",
        editorCheckCallback: (checking, _, ctx) => {
          let shared = this.getSharedItem(ctx.file.path);
          if (shared) {
            if (!checking)
              this.deleteFile(shared);
            return true;
          }
          return false;
        }
      });
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, defaultSettings, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  getSharedItem(path) {
    return this.settings.shared.find((f) => f.path == path);
  }
  shareFile(file) {
    return __async(this, null, function* () {
      try {
        let response = yield (0, import_obsidian3.requestUrl)({
          url: `${this.settings.url}/share.php`,
          method: "POST",
          body: JSON.stringify({ content: yield this.preProcessMarkdown(file) })
        });
        let shared = response.json;
        shared.path = file.path;
        this.settings.shared.push(shared);
        yield this.saveSettings();
        this.refreshAllViews();
        yield this.copyShareLink(shared, false);
        new import_obsidian3.Notice(`Successfully shared ${file.basename} and copied link to clipboard`);
        return shared;
      } catch (e) {
        new import_obsidian3.Notice(createFragment((f) => {
          f.createSpan({ text: `There was an error sharing ${file.basename}: ` });
          f.createEl("code", { text: e });
        }), 1e4);
        console.log(e);
      }
    });
  }
  updateFile(item, file, notice = true) {
    return __async(this, null, function* () {
      try {
        yield (0, import_obsidian3.requestUrl)({
          url: `${this.settings.url}/share.php?id=${item.id}`,
          method: "PATCH",
          headers: { "Password": item.password },
          body: JSON.stringify({ content: yield this.preProcessMarkdown(file) })
        });
        if (notice)
          new import_obsidian3.Notice(`Successfully updated ${file.basename} on JSP`);
        return true;
      } catch (e) {
        new import_obsidian3.Notice(createFragment((f) => {
          f.createSpan({ text: `There was an error updating ${file.basename}: ` });
          f.createEl("code", { text: e });
        }), 1e4);
        console.log(e);
      }
    });
  }
  deleteFile(item, notice = true) {
    return __async(this, null, function* () {
      let name = removeExtension(item.path);
      try {
        yield (0, import_obsidian3.requestUrl)({
          url: `${this.settings.url}/share.php?id=${item.id}`,
          method: "DELETE",
          headers: { "Password": item.password }
        });
        this.settings.shared.remove(item);
        yield this.saveSettings();
        this.refreshAllViews();
        if (notice)
          new import_obsidian3.Notice(`Successfully deleted ${name} from JSP`);
        return true;
      } catch (e) {
        new import_obsidian3.Notice(createFragment((f) => {
          f.createSpan({ text: `There was an error deleting ${name}: ` });
          f.createEl("code", { text: e });
        }), 1e4);
        console.log(e);
      }
    });
  }
  copyShareLink(item, notice = true) {
    return __async(this, null, function* () {
      yield navigator.clipboard.writeText(`${this.settings.url}#${item.id}`);
      if (notice)
        new import_obsidian3.Notice(`Copied link to ${removeExtension(item.path)} to clipboard`);
    });
  }
  preProcessMarkdown(file) {
    return __async(this, null, function* () {
      var _a, _b;
      let text = yield this.app.vault.cachedRead(file);
      if (this.settings.stripFrontmatter)
        text = text.replace(/^---\s*\n.*?\n---\s*\n(.*)$/s, "$1");
      text = text.replace(/%%.*?%%/sg, "");
      if (this.settings.includeNoteName)
        text = `# ${file.basename}

${text}`;
      let attachments = /!\[(.*)]\((.+)\)|!\[\[(.+)]]/g;
      let match;
      while ((match = attachments.exec(text)) != null) {
        let alt = (_a = match[1]) != null ? _a : "";
        let url = (_b = match[2]) != null ? _b : match[3];
        if (url.startsWith("http"))
          continue;
        try {
          let resolved = this.app.metadataCache.getFirstLinkpathDest(url, file.path).path;
          let attachment = this.app.vault.getAbstractFileByPath(resolved);
          let data = (0, import_obsidian3.arrayBufferToBase64)(yield this.app.vault.readBinary(attachment));
          let img = `<img src="data:image/${resolved.split(".").pop()};base64, ${data}" alt="${alt}">`;
          text = text.substring(0, match.index) + img + text.substring(match.index + match[0].length);
        } catch (e) {
          console.log(`Error embedding attachment ${url}: ${e}`);
        }
      }
      return text;
    });
  }
  refreshAllViews() {
    for (let leaf of this.app.workspace.getLeavesOfType(JSPView.type)) {
      if (leaf.view instanceof JSPView)
        leaf.view.refresh();
    }
  }
};
function removeExtension(file) {
  let split = file.split(".");
  split.pop();
  return split.join(".");
}
